Things that are already covered:
* Extension Methods
* XUnit Tests
* IEnumerable example
* DateTime
* 3 a's of testing
* Filters of IEnumerable
* Class state and behavior example
* Class inheritence
* Constants readonly and const
* Dumb getters and setters
* Backing fields
* Properties
* Auto Properties
* Accessing arguements in main
* string Interpolation
* object reference
* pass by value
* pass by ref

3 a's of testing
arrange(the data)
act(on the data)
assert(the data is a particular state)

OOP
Encapsulation
	The level of abstraction
	(glance test - at a glance can you see what the code is doing) 
Inheritance
Polymorphism

Responsibilities and Roles
	Knowing
	Deciding
	Doing

YAGNI - You Ain't Gonna Need It
KISS - Keep It Simple, Stupid

Template Pattern - Abstract class with concrete inherited classes

Encapsulation is good
Polymorphism is convient
Inheritance causes more problems than it solves

Inheritance Critique
Pro: Code Reuse
Con: Binds two classes tightly together. A derived class needs to know details about the base class. This creates

Avoid cognitive dissondence

If you don't like the api you see, go off and write the api you want to see in notepad or on a piece of paper.

Code should be written so that it takes the least amount of cognitive load to know what it is doing without having information that is repetitive or unessecary.

Scott Allen's 10 Rules
1.  Keep classes small - roles, responsibilities
2.  Keep methods short - 1 to 10 lines of code is good. ~20 might be okay. Up to 30 might be worrying. Anything over 60 needs to be refactored. If the method doesn't fit on screen it is harder to understand.
3.  Try to avoid comments - Comments are meaningless. rewrite the code to have more meaning instead of relying on comments. api documentation comments are okay.
4.  Try to avoid multiple exits - Makes the flow confusing. 
5.  Encapsulate complex expressions - it reveals the expressions meaning. Leans more to instant recognition.
6.  Warnings are errors - Keeps entropy away. Clean up the warnings. Warnings level to 4 and warnings as errors.
7.  Avoid too many parameters - it causes confusion and is a sign that a class should be used instead. 4 params is too much. 4 may signify that the params have a relationship.
8.  Avoid Boolean Parameters - it looks bad and doesn't tell you what it's doing. Requires more thought than what is nessecary. Don't allow the client to see it. Okay for private methods that aid the public facing api.
9.  Use Exceptions for errors - use only for errors and not control flow
10. Avoid #regions - regions are used to hide ugly code and classes that have exploded in size and responsibilty

Symmetry is good